# macOS GCC Docker build for cmake-initializer
# Using Ubuntu with cross-compilation tools for macOS

ARG BASE_IMAGE=ubuntu:22.04
ARG CMAKE_VERSION=3.28.1
ARG BUILD_TYPE=Release

FROM ${BASE_IMAGE} AS development

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    TZ=UTC \
    CMAKE_BUILD_TYPE=${BUILD_TYPE} \
    TARGET_PLATFORM=macos \
    COMPILER=gcc \
    OSXCROSS_ROOT=/opt/osxcross

# Install base system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    ninja-build \
    git \
    wget \
    curl \
    unzip \
    zip \
    tar \
    pkg-config \
    ca-certificates \
    software-properties-common \
    python3 \
    python3-pip \
    file \
    lsb-release \
    sudo \
    dos2unix \
    clang \
    llvm-dev \
    libbz2-dev \
    libssl-dev \
    liblzma-dev \
    libxml2-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install modern CMake from Kitware repository
ARG CMAKE_VERSION
RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null \
    && apt-add-repository 'deb https://apt.kitware.com/ubuntu/ jammy main' \
    && apt-get update \
    && apt-get install -y cmake \
    && rm -rf /var/lib/apt/lists/*

# Install PowerShell for cross-platform scripts
RUN wget -q "https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb" \
    && dpkg -i packages-microsoft-prod.deb \
    && apt-get update \
    && apt-get install -y powershell \
    && rm packages-microsoft-prod.deb \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set up OSXCross for macOS cross-compilation
RUN git clone https://github.com/tpoechtrager/osxcross ${OSXCROSS_ROOT} \
    && cd ${OSXCROSS_ROOT} \
    && git checkout 1a1733a \
    && ./tools/get_dependencies.sh

# Note: macOS SDK needs to be provided separately due to licensing
# Users need to place MacOSX*.sdk.tar.xz in osxcross/tarballs/
# This is a placeholder setup - actual SDK installation would happen at runtime

WORKDIR /workspace

# Copy project files selectively
COPY project/ project/
COPY scripts/ scripts/
COPY docs/ docs/
COPY LICENSE README.md ./

# Make scripts executable
RUN chmod +x scripts/*.ps1

# Set up entry point
COPY docker/docker-entrypoint.ps1 /usr/local/bin/
RUN dos2unix /usr/local/bin/docker-entrypoint.ps1 && chmod +x /usr/local/bin/docker-entrypoint.ps1

EXPOSE 8080

ENTRYPOINT ["/usr/local/bin/docker-entrypoint.ps1"]
CMD ["--help"]
