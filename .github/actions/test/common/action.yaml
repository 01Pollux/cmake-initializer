permissions:
  contents: read

inputs:
  config-name:
    description: 'Name of the configuration preset to use for the tests'
    required: true
  config-os:
    description: 'Operating system to use for the tests'
    required: true
  config-preset:
    description: 'Configuration preset to use for the tests'
    required: true
  config-output:
    description: 'Output directory for the test artifacts'
    required: true

  ctest-site:
    description: 'CTest dashboard site URL (optional)'
    required: false
  ctest-location:
    description: 'CTest dashboard location path (optional)'
    required: false
  ctest-test-timeout:
    description: 'Test timeout in seconds (optional)'
    required: false
    default: '300'
  ctest-drop-method:
    description: 'HTTP protocol for uploads (default: https)'
    required: false
    default: 'https'
  ctest-auth-token:
    description: 'CDash authentication token (optional)'
    required: false
  ctest-dashboard-model:
    description: 'CDash dashboard model: Experimental, Nightly, or Experimental (default: Experimental)'
    required: false
    default: 'Experimental'

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: Install CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.30.0'

    - name: Setup test environment (${{ inputs.config-name }})
      shell: pwsh
      run: |
        Write-Host "=== Setting up test environment for ${{ inputs.config-name }} on ${{ inputs.config-os }} ==="
        
        # Use consistent path separators for Windows
        $BUILD_DIR = Join-Path "${{ runner.temp }}" "${{ inputs.config-output }}" "build"
        $INSTALL_DIR = Join-Path "${{ runner.temp }}" "${{ inputs.config-output }}" "install"

        # Create directories if they don't exist
        New-Item -ItemType Directory -Force -Path $BUILD_DIR -ErrorAction SilentlyContinue
        New-Item -ItemType Directory -Force -Path $INSTALL_DIR -ErrorAction SilentlyContinue

        # Set environment variables for the test
        Add-Content -Path $env:GITHUB_ENV -Value "INSTALL_DIR=$INSTALL_DIR"
        Add-Content -Path $env:GITHUB_ENV -Value "BUILD_DIR=$BUILD_DIR"

        # Get version (sanitize slashes)
        $VERSION = $env:GITHUB_REF -replace 'refs/tags/', '' -replace '/', '-'
        if (-not $VERSION) { $VERSION = "1.0.0-dev" }

        # Unique artifact name including config name
        $ARTIFACT_NAME = "${{ inputs.config-name }}-test-results-$VERSION"
        Add-Content -Path $env:GITHUB_ENV -Value "ARTIFACT_NAME=$ARTIFACT_NAME"

    - name: Build and Test project (${{ inputs.config-name }})
      shell: pwsh
      run: |
        Write-Host "=== Building and Testing ${{ inputs.config-name }} using scripts ==="
        
        # Use the new build and test scripts with BUILD_TESTING enabled
        & "${{ github.workspace }}/scripts/build.ps1" -Preset "${{ inputs.config-preset }}" -ExtraArgs @("-DBUILD_TESTING=ON")
        
        if ($LASTEXITCODE -ne 0) {
            Write-Error "❌ Build failed with exit code: $LASTEXITCODE"
            exit $LASTEXITCODE
        }
        
        & "${{ github.workspace }}/scripts/test.ps1" -Preset "${{ inputs.config-preset }}"
        
        if ($LASTEXITCODE -ne 0) {
            Write-Error "❌ Tests failed with exit code: $LASTEXITCODE"
            exit $LASTEXITCODE
        }
        
        Write-Host "✅ Build and tests completed successfully"

    - name: Submit to CDash (${{ inputs.config-name }})
      if: inputs.ctest-site != '' && inputs.ctest-location != ''
      shell: pwsh
      run: |
        Write-Host "=== Submitting test results to CDash ==="
        $scriptPath = "${{ github.workspace }}/scripts/ci/submit-cdash.ps1"
        & $scriptPath `
          -BuildDir "${{ github.workspace }}/out/build/${{ inputs.config-preset }}" `
          -SourceDir "${{ github.workspace }}/project" `
          -BuildName "${{ inputs.config-name }}-${{ runner.os }}" `
          -Preset "${{ inputs.config-preset }}" `
          -CdashSite "${{ inputs.ctest-site }}" `
          -CdashLocation "${{ inputs.ctest-location }}" `
          -AuthToken "${{ inputs.ctest-auth-token }}" `
          -DropMethod "${{ inputs.ctest-drop-method }}" `
          -DashboardModel "${{ inputs.ctest-dashboard-model }}"
        
        if ($LASTEXITCODE -ne 0) {
            Write-Error "❌ CDash submission failed - this usually indicates test failures"
            exit $LASTEXITCODE
        }

    - name: Cleanup test environment
      if: always()
      shell: pwsh
      run: |
        Write-Host "=== Cleaning up test environment ==="
        & "${{ github.workspace }}/scripts/clean.ps1" -All -Force
        Write-Host "Test cleanup completed."