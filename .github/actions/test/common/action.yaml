permissions:
  contents: read

inputs:
  config-name:
    description: 'Name of the configuration preset to use for the tests'
    required: true
  config-os:
    description: 'Operating system to use for the tests'
    required: true
  config-preset:
    description: 'Configuration preset to use for the tests'
    required: true
  config-output:
    description: 'Output directory for the test artifacts'
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: Install CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.30.0'

    - name: Setup test environment
      shell: pwsh
      run: |
        # Use consistent path separators for Windows
        $BUILD_DIR = Join-Path "${{ runner.temp }}" "${{ inputs.config-output }}" "build"
        $INSTALL_DIR = Join-Path "${{ runner.temp }}" "${{ inputs.config-output }}" "install"
        $TEST_RESULTS_DIR = Join-Path "${{ runner.temp }}" "${{ inputs.config-output }}" "test-results"

        # Create directories if they don't exist
        New-Item -ItemType Directory -Force -Path $BUILD_DIR -ErrorAction SilentlyContinue
        New-Item -ItemType Directory -Force -Path $INSTALL_DIR -ErrorAction SilentlyContinue
        New-Item -ItemType Directory -Force -Path $TEST_RESULTS_DIR -ErrorAction SilentlyContinue

        # Set environment variables for the test
        Add-Content -Path $env:GITHUB_ENV -Value "INSTALL_DIR=$INSTALL_DIR"
        Add-Content -Path $env:GITHUB_ENV -Value "BUILD_DIR=$BUILD_DIR"
        Add-Content -Path $env:GITHUB_ENV -Value "TEST_RESULTS_DIR=$TEST_RESULTS_DIR"

        # Get version (sanitize slashes)
        $VERSION = $env:GITHUB_REF -replace 'refs/tags/', '' -replace '/', '-'
        if (-not $VERSION) { $VERSION = "1.0.0-dev" }

        # Unique artifact name
        $ARTIFACT_NAME = "${{ inputs.config-output }}-test-results-$VERSION"
        Add-Content -Path $env:GITHUB_ENV -Value "ARTIFACT_NAME=$ARTIFACT_NAME"

        Write-Host "Build Dir: $BUILD_DIR"
        Write-Host "Install Dir: $INSTALL_DIR"
        Write-Host "Test Results Dir: $TEST_RESULTS_DIR"

    - name: Configure project for testing
      shell: pwsh
      run: |
        # Configure specifically for testing with all test targets enabled
        cmake -S ./project -B "${{ env.BUILD_DIR }}" --preset ${{ inputs.config-preset }} -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" -DBUILD_TESTING=ON

    - name: Build project for testing
      shell: pwsh
      run: |
        # Build all targets including tests
        cmake --build "${{ env.BUILD_DIR }}" --config Debug
        
        Write-Host "=== Test Build Completed ==="
        Write-Host "Built all targets including tests for validation"

    - name: Run tests with CTest
      shell: pwsh
      run: |
        cd "${{ env.BUILD_DIR }}"
        
        # Create the test results file path
        $TEST_RESULTS_FILE = Join-Path "${{ env.TEST_RESULTS_DIR }}" "test-results.xml"
        
        # Run tests with verbose output and JUnit XML results
        ctest --build-config Debug --output-on-failure --verbose --output-junit "$TEST_RESULTS_FILE"
        
        # Verify the file was created
        if (Test-Path $TEST_RESULTS_FILE) {
            Write-Host "Test results file created successfully at: $TEST_RESULTS_FILE"
            Write-Host "File size: $((Get-Item $TEST_RESULTS_FILE).Length) bytes"
        } else {
            Write-Host "ERROR: Test results file was not created!"
            exit 1
        }

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.TEST_RESULTS_DIR }}/
        retention-days: 7

    - name: Publish Test Results (Linux)
      uses: EnricoMi/publish-unit-test-result-action@2
      if:   if: (!cancelled())
      with:
        files: "${{ env.TEST_RESULTS_DIR }}/test-results.xml"
        check_name: "Test Results (${{ inputs.config-name }})"
        comment_mode: failures
        fail_on: test failures

    - name: Cleanup test environment
      if: always()
      shell: pwsh
      run: |
        $BUILD_DIR="${{ env.BUILD_DIR }}"
        $INSTALL_DIR="${{ env.INSTALL_DIR }}"

        # Remove build and install directories (keep test results)
        Remove-Item -Path $BUILD_DIR -Recurse -Force -ErrorAction SilentlyContinue
        Remove-Item -Path $INSTALL_DIR -Recurse -Force -ErrorAction SilentlyContinue
        
        Write-Host "Test cleanup completed."
