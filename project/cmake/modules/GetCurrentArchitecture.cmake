#
# Function to determine architecture names across different systems.
# This function sets two variables:
# - LLVM_ARCH_VAR: The architecture name used by LLVM.
# - MS_ARCH_VAR: The architecture name used by Microsoft.
# usage:
# get_current_architecture(LLVM_ARCH_VAR MS_ARCH_VAR)
#
function(get_current_architecture LLVM_ARCH_VAR MS_ARCH_VAR)
    # Detect architecture based on CMake variables and processor info
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        if(CMAKE_SYSTEM_PROCESSOR MATCHES "^(AMD64|x86_64)$")
            set(${LLVM_ARCH_VAR} "x86_64" PARENT_SCOPE)
            set(${MS_ARCH_VAR} "x64" PARENT_SCOPE)
        elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64|arm64)$")
            set(${LLVM_ARCH_VAR} "aarch64" PARENT_SCOPE)
            set(${MS_ARCH_VAR} "arm64" PARENT_SCOPE)
        elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^ppc64")
            set(${LLVM_ARCH_VAR} "powerpc64" PARENT_SCOPE)
            set(${MS_ARCH_VAR} "ppc64" PARENT_SCOPE)
        elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^s390x")
            set(${LLVM_ARCH_VAR} "s390x" PARENT_SCOPE)
            set(${MS_ARCH_VAR} "s390x" PARENT_SCOPE)
        elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^riscv64")
            set(${LLVM_ARCH_VAR} "riscv64" PARENT_SCOPE)
            set(${MS_ARCH_VAR} "riscv64" PARENT_SCOPE)
        elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^mips64")
            set(${LLVM_ARCH_VAR} "mips64" PARENT_SCOPE)
            set(${MS_ARCH_VAR} "mips64" PARENT_SCOPE)
        else()
            message(STATUS "64-bit architecture '${CMAKE_SYSTEM_PROCESSOR}' not specifically recognized, using generic x86_64")
            set(${LLVM_ARCH_VAR} "x86_64" PARENT_SCOPE)
            set(${MS_ARCH_VAR} "x64" PARENT_SCOPE)
        endif()
    elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
        if(CMAKE_SYSTEM_PROCESSOR MATCHES "^(i[3-6]86|x86)$")
            set(${LLVM_ARCH_VAR} "i386" PARENT_SCOPE)
            set(${MS_ARCH_VAR} "x86" PARENT_SCOPE)
        elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(arm|armv[0-9])$")
            set(${LLVM_ARCH_VAR} "arm" PARENT_SCOPE)
            set(${MS_ARCH_VAR} "arm" PARENT_SCOPE)
        elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^mips")
            set(${LLVM_ARCH_VAR} "mips" PARENT_SCOPE)
            set(${MS_ARCH_VAR} "mips" PARENT_SCOPE)
        else()
            message(STATUS "32-bit architecture '${CMAKE_SYSTEM_PROCESSOR}' not specifically recognized, using generic i386")
            set(${LLVM_ARCH_VAR} "i386" PARENT_SCOPE)
            set(${MS_ARCH_VAR} "x86" PARENT_SCOPE)
        endif()
    else()
        message(WARNING "Unable to determine architecture: CMAKE_SIZEOF_VOID_P=${CMAKE_SIZEOF_VOID_P}")
        set(${LLVM_ARCH_VAR} "" PARENT_SCOPE)
        set(${MS_ARCH_VAR} "" PARENT_SCOPE)
    endif()
endfunction()